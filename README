INTRODUCTION:

This tool generates code comments automatically by 
analyzing existing software repositories. 
It applies code clone detection techniques to discover 
similar code segments and use the comments from some code segments 
to describe the other similar code segments. 

INSTALLATION:

sudo apt-get install openjdk-8-jdk

HOW TO RUN:

1.
Configure "config.xml"'s <database> and <project> tag
with the appropriate folder path.
The folders should contain Java source code files.

Code inside the <project> tag represents the target project.

Code inside the <database> tag represents the database.
CloCom will extract code comments from this folder for
the code inside the <project> folder.

See the "config" folder for xml examples and 
modify the parameters.

2. 

'make' to compile.

3. 
Run the shell script with the config file as the first input argument.

./cloneDigger.sh config.xml

4.

The output is a list of clones from the database path and 
the respective generated comment.

NOTES.

databaseFormat - 0 for standard Java source code, 1 for autocomment format

minNumLines - number of statements a clone should have
matchAlgorithm - 1 for gapped, 0 for non-gapped
matchMode - 1 for between comparison (loads files in the project path into memory), 0 for full mesh
gapSize - set this for gapped comparision
meshBlockSize - number of source code files to load into memory for full mesh
numberThreads - 0 to disable multithreading, else specify the number of cores

debug - turn on debug statements
removeEmpty - remove the display of clones that doesn't have a comment
buildDatabase - choose if we want to retokenize the database directory
loadDatabaseFilePaths - this allows loading of the database files' paths from a cached file

Please use commit
f89b780bac5ea7322633550c29fffd3c199e1f2e
for the conference paper.


